{"version":3,"sources":["components/UserList.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["UserList","_ref","users","length","react_default","a","createElement","map","user","key","allUsers","Home","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","filteredUsers","filterUsers","bind","assertThisInitialized","text","filter","toLowerCase","includes","e","target","value","getFilteredUsersForText","setState","onInput","components_UserList","Component","App","className","components_Home","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MAeeA,EAbE,SAAAC,GAAe,IAAZC,EAAYD,EAAZC,MAChB,OAAIA,EAAMC,OAAS,EAEXC,EAAAC,EAAAC,cAAA,UACKJ,EAAMK,IAAI,SAAAC,GAAI,OAAIJ,EAAAC,EAAAC,cAAA,MAAIG,IAAKD,GAAOA,MAK3CJ,EAAAC,EAAAC,cAAA,sBCRFI,EAAW,CAAC,cAAU,OAAQ,QAAS,SAkC9BC,cA/BX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACTC,cAAeV,GAGnBE,EAAKS,YAAcT,EAAKS,YAAYC,KAAjBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KANTA,uFASUY,GACpB,OAAOd,EAASe,OAAO,SAAAjB,GAAI,OAAIA,EAAKkB,cAAcC,SAASH,EAAKE,qDAGxDE,GACR,IAAMJ,EAAOI,EAAEC,OAAOC,MAChBV,EAAgBL,KAAKgB,wBAAwBP,GACnDT,KAAKiB,SAAS,CACVZ,mDAKJ,OACIhB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAO2B,QAASlB,KAAKM,cACrBjB,EAAAC,EAAAC,cAAC4B,EAAD,CAAUhC,MAAOa,KAAKI,MAAMC,wBA1BzBe,aCQJC,mLARX,OACEhC,EAAAC,EAAAC,cAAA,OAAK+B,UAAU,OACbjC,EAAAC,EAAAC,cAACgC,EAAD,cAJUH,aCSEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4829d506.chunk.js","sourcesContent":["import React from 'react'\n\nconst UserList = ({ users }) => {\n    if (users.length > 0) {\n        return (\n            <ul>\n                {users.map(user => <li key={user}>{user}</li>)}\n            </ul>\n        );\n    }\n    return (\n        <p>No data!</p>\n    )\n}\n\nexport default UserList;","import React, { Component } from 'react'\nimport UserList from './UserList';\n\nconst allUsers = [\"MichaÅ‚\", \"Ania\", \"Kasia\", \"Tomek\"]\n\nclass Home extends Component {\n    constructor() {\n        super();\n        this.state = {\n            filteredUsers: allUsers\n        };\n\n        this.filterUsers = this.filterUsers.bind(this);\n    }\n\n    getFilteredUsersForText(text) {\n        return allUsers.filter(user => user.toLowerCase().includes(text.toLowerCase()))\n    }\n\n    filterUsers(e){\n        const text = e.target.value;\n        const filteredUsers = this.getFilteredUsersForText(text);\n        this.setState({\n            filteredUsers\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <input onInput={this.filterUsers} />\n                <UserList users={this.state.filteredUsers}/>\n            </div>\n        )\n    }\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport Home from '../src/components/Home';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Home />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}